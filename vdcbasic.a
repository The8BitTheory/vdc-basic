; vdcbasic
; made from Felix 'skOi!nk' Rosenhahn's "vdc-tool 2"
;
;  5 Jan 2003	improved label names
;		removed unneeded checks of vdc "ready" flag
; 31 Oct 2013	beautified
;  1 Nov 2013	renamed to vdcbasic
;		optimized loops for speed, everything else for size (80% left)
;		fixed bug: functions trashed $16/$17
;		fixed bug: vtr and rtv did not count correctly
;  3 Nov 2013	fixed bug: vmf wrote one extra byte
; 10 Nov 2013	split into BASIC part and vdc lib
; 18 Nov 2013	BANKING and SELFMOD are now configurable
;		reading fake register 255 returns capacity
;		fixed RST
; 23 Nov 2013	changed RST to use flag bits
; 24 Nov 2013	RST now resets r37 as well
; 25 Nov 2013	reading fake register 254 returns VDC version
; 30 Nov 2013	added SYN instruction
;  7 Dec 2013	added DISP, ATTR and CRSR instructions, also added installation message
; 16 Mar 2014	extended SYN: now allows writing registers
; TODO		disp, attr and crsr should accept values <0 and >65535!
!macro message {!pet "vdc basic v10 installed"}

	!to "vdcbasic.bin", cbm

	!source <6502/std.a>		; for +bit16
	!source <6502/opcodes.a>	; for AND/ORA self-mods
	!source <cbm/c128/kernel.a>	; for k_primm
	!source "vdclib.a"	; macros and code parts

; zp
linnum	= $16	; uint16 for POKE, PEEK(), etc.
arg1	= $84	; actually colors and scale factors for graphics
arg2	= $86
arg3	= $88

; basic
b_skip_comma			= $795c	; if comma: skip, otherwise: syntax error
b_parse_uint16_comma_uint8	= $8803	; read unsigned 16-bit value to linnum, comma, unsigned 8-bit value to X
b_parse_comma_uint16		= $880f	; skip comma, read unsigned 16-bit value to AAYY (also stored in linnum)
b_parse_uint16			= $8812	; read unsigned 16-bit value to AAYY (also stored in linnum)
b_parse_uint8_to_X		= $87f4	; read unsigned 8-bit value to X
c_copy_rom_font_to_vram 	= $c027
e_set_vdc_registers		= $e1dc	; a kernel routine to set several registers in a row

; constants
FIRST_0xCE_TOKEN	= $0b	; BASIC 7 goes up to $ce $0a ("POINTER"), so we start at $ce $0b
FIRST_0xFE_TOKEN	= $27	; BASIC 7 goes up to $fe $26 ("SLOW"), so we start at $fe $27
MODIFIED8		= $ff	; dummy value

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; entry point: intercept four BASIC vectors
		* = $1300
		; three are consecutive
		ldx #$05
-			lda vectors, x
			sta $030c, x
			dex
			bpl -
		; fourth is set separately
		lda #<call_function
		sta $02fc
		lda #>call_function
		sta $02fd
		; output installation message
		lda #0
		sta $ff00
		jsr k_primm
		!by 13
		+message
		!by 13, 0	; message terminator
		rts
vectors ; table of three vectors
		!word tokenize, detokenize, execute_instruction
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; intercepted BASIC vectors
tokenize
		pha
		; try new commands
		lda #>instruction_strings
		ldy #<instruction_strings
		jsr $43e2
		bcs tokenize_instruction
		; try new functions
		lda #>function_strings
		ldy #<function_strings
		jsr $43e2
		bcs tokenize_function
		; not found -> pass to BASIC
		pla
		sec
		jmp $4321

tokenize_instruction
		tax
		pla
		txa
		and #$7f
		clc
		adc #FIRST_0xFE_TOKEN
		ldx #$00
		jmp $43b2

tokenize_function
		tax
		pla
		txa
		and #$7f
		clc
		adc #FIRST_0xCE_TOKEN
		ldx #$ff
		jmp $43b2

detokenize
		ora #$80
		inx
		beq detokenize_function
;detokenize_instruction
		sec
		sbc #FIRST_0xFE_TOKEN
		tax
		lda #>instruction_strings
		ldy #<instruction_strings
		jmp $516a

detokenize_function
		sec
		sbc #FIRST_0xCE_TOKEN
		tax
		lda #>function_strings
		ldy #<function_strings
		jmp $516a

execute_instruction
		ldx #0
		stx $ff00
		and #$7f
		sec
		sbc #FIRST_0xFE_TOKEN
		asl
		tay
		lda instruction_ptrs + 1, y
		pha
		lda instruction_ptrs, y
		pha
		jmp $0380

call_function
		ldx #0
		stx $ff00
		sec
		sbc #FIRST_0xCE_TOKEN
		asl
		tay
		lda function_ptrs + 1, y
		sta $58
		lda function_ptrs, y
		sta $57
		jsr $56
		clc
		rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; strings and pointers
instruction_strings
		!pet "rgW", "rgA", "rgO"
		!pet "vmW", "vmA", "vmO"
		!pet "vmF", "vmC"
		!pet "rtV", "vtR", "vcC", "swP"
		!pet "rsT", "syN"
		!pet "disP", "attR", "crsR"
		!byte 0	; terminator
instruction_ptrs
		!word rgw - 1, rga - 1, rgo - 1
		!word vmw - 1, vma - 1, vmo - 1
		!word vmf - 1, vmc - 1
		!word rtv - 1, vtr - 1, vcc - 1, swp - 1
		!word rst - 1, syn - 1
		!word disp - 1, attr - 1, crsr - 1
function_strings
		!pet "rgD", "vmD"
		!byte 0	; terminator
function_ptrs
		!word rgd, vmd
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; new functions
shared_function_entry
		jsr $7956	; parse opening quote and expression?
		jsr $8815	; make sure uint16
		jmp io_on

rgd ; read VDC register
		lda linnum + 1	; we must backup this because it might be in use by caller
		pha
		lda linnum
		pha
		jsr shared_function_entry
		;FIXME - make sure reg is uint8!
		ldx linnum
		cpx #254	; first fake register
		bcs .read_fake_register
		; normal registers
		jsr vdc_reg_X_to_A
		jmp $80db	; end of PEEK, does TAY:PLA:STA$16:PLA:STA$17:JMP$84d4

.read_fake_register
		inx	; 255?
		beq .check_capacity
		;inx	; 254?
		;beq .return_version
;.return_version ; read fake "VDC version" register
		lda vdc_state
		and #%...#####
		jmp $80db	; end of PEEK, does TAY:PLA:STA$16:PLA:STA$17:JMP$84d4

.check_capacity ; read fake "VRAM capacity" register
		jsr vdc_check_capacity
		jmp $80db	; end of PEEK, does TAY:PLA:STA$16:PLA:STA$17:JMP$84d4

		+addcode_vdc_check_capacity

vmd ; read VRAM location
		lda linnum + 1	; we must backup this because it might be in use by caller
		pha
		lda linnum
		pha
		jsr shared_function_entry
		ldy linnum
		lda linnum + 1
		jsr vram_AAYY_to_A
		jmp $80db	; end of PEEK, does TAY:PLA:STA$16:PLA:STA$17:JMP$84d4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; new instructions (the simple ones)
simple_instruction_shared_entry ; read args (uint16, uint8) and activate I/O
		jsr b_parse_uint16_comma_uint8	; >> linnum, X
io_on
		lda $ff00	; this should be $01
		and #$fe	; activate I/O (just to make sure; no need to revert it later on)
		sta $ff00
		rts

chrgot = $0386
syn ; wait for end of text window, then write register values
		jsr chrgot	; anything else?
		bne .syn_with_args
.just_syn ; wait for end of text window
		jsr io_on
		; wait until we are in text window
-			lda vdc_state
			and #$20
			bne -
		; wait until we are out of text window
-			lda vdc_state
			and #$20
			beq -
		rts

.syn_with_args ; read reg/value pairs into buffer, SYN, write data to vdc regs
		; remember start of array
		tsx
		stx .spbuf
		bne .entry
		;--
-			jsr b_skip_comma
.entry			jsr b_parse_uint8_to_X	; parse reg
			txa
			pha
			jsr b_skip_comma
			jsr b_parse_uint8_to_X	; parse value
			txa
			pha
			jsr chrgot	; more?
			bne -
		; remember end of array
		tsx
		stx .lowest_sp
		; remember interrupt mask
		php
		jsr .just_syn	; this will activate i/o
		sei
		; write buffered reg/value pairs to vdc
		ldy .spbuf
-			lda $0100, y
			dey
			tax
			lda $0100, y
			dey
			jsr A_to_vdc_reg_X
.lowest_sp = * + 1:	cpy #MODIFIED8
			bne -
		; restore interrupt mask
		plp
		; restore original stack pointer
.spbuf = * + 1:	ldx #MODIFIED8
		txs
		rts

!zone register_access

		+addcode_vdc_read

rgw ; VDC register = value
		jsr simple_instruction_shared_entry	; >> linnum, X
		txa
		ldx linnum
		jmp A_to_vdc_reg_X

rga ; VDC register &= value
		lda #opcode_AND_8
		+bit16	; skip the next instruction
rgo ; VDC register |= value
		lda #opcode_ORA_8
		sta .SELFMOD
		jsr simple_instruction_shared_entry	; >> linnum, X
		stx linnum + 1	; store value in unused high-byte of address
		ldx linnum
		jsr vdc_reg_X_to_A
.SELFMOD	and linnum + 1	; MODIFIED to perform either AND $xx or ORA $xx
		jmp A_to_vdc_reg_X

!zone sixteen_bit_register_access

crsr ; set cursor address
		lda #vdcr_crsr_hi
		+bit16	; skip the next instruction
attr ; set address of attribute buffer
		lda #vdcr_attr_hi
		+bit16	; skip the next instruction
disp ; set address of display buffer
		lda #vdcr_display_hi
		pha
;FIXME - accept values <0 and >65535 and wrap them accordingly!
		jsr b_parse_uint16	; >> linnum
		jsr io_on
		pla
		tax
		lda linnum + 1	; get high byte for first register (yes, sixteen-bit VDC registers are big-endian)
		jsr A_to_vdc_reg_X
		inx
		lda linnum	; get low byte for second register
		jmp A_to_vdc_reg_X

!zone VRAM_access

		+addcode_A_to_vram_XXYY

vmw ; VRAM location = value
		jsr simple_instruction_shared_entry	; >> linnum, X
		txa
		ldy linnum
		ldx linnum + 1
		jmp A_to_vram_XXYY

vma ; VRAM location &= value
		lda #opcode_AND_8
		+bit16	; skip the next instruction
vmo ; VRAM location |= value
		lda #opcode_ORA_8
		sta .SELFMOD
		jsr simple_instruction_shared_entry	; >> linnum, X
		ldy linnum
		stx linnum	; store value in (no longer needed) low-byte of address
		lda linnum + 1
		jsr vram_AAYY_to_A
.SELFMOD	and linnum	; MODIFIED to perform either AND $xx or ORA $xx
		ldx linnum + 1
		jmp A_to_vram_XXYY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; new instructions (the more complicated ones)
complex_instruction_shared_entry ; read args (uint16, uint16, uint16), remember CR, activate full RAM with I/O
		jsr b_parse_uint16
		sty arg1
		sta arg1 + 1
		jsr b_parse_comma_uint16
		sty arg2
		sta arg2 + 1
		jsr b_parse_comma_uint16
		sty arg3
		sta arg3 + 1
		; remember memory configuration for shared exit
		ldx $ff00
		stx .cr
		ldx #$3e	; full RAM with I/O
		stx $ff00
		rts	; > AAYY = arg3

complex_instruction_shared_exit ; restore memory configuration
.cr = * + 1:	lda #MODIFIED8
		sta $ff00
		rts

!zone fill_and_copy

		+addcode_vdc_do_YYAA_cycles

vmf ; fill VRAM with value
		jsr complex_instruction_shared_entry	; > AAYY = arg3
		; decrement byte counter because the first one will be written manually
		tya	; take a look at low byte
		bne +
			dec arg3 + 1
+		dec arg3
		; clear BLOCK COPY register bit to get BLOCK WRITE:
		ldx #24
		jsr vdc_reg_X_to_A
		and #$7f
		jsr A_to_vdc_reg_X
		; write first byte
		lda arg2
		ldy arg1
		ldx arg1 + 1
		jsr A_to_vram_XXYY
		jmp vmf_vmc_shared_end

vmc ; copy VRAM to VRAM
		jsr complex_instruction_shared_entry
		; set register bit for BLOCK COPY:
		ldx #24
		jsr vdc_reg_X_to_A
		ora #128
		jsr A_to_vdc_reg_X
		; set source
		ldy arg1
		lda arg1 + 1
		ldx #32
		jsr AY_to_vdc_regs_Xp1
		; set target
		ldy arg2
		lda arg2 + 1
		jsr AY_to_vdc_regs_18_19
vmf_vmc_shared_end
		lda arg3
		ldy arg3 + 1
		jsr vdc_do_YYAA_cycles
		jmp complex_instruction_shared_exit

!zone transfer_stuff

VDCLIB_OPTION_SELFMOD = 1
VDCLIB_OPTION_BANKING = 1

rtv_vtr_swp_shared_setup
		jsr AY_to_vdc_regs_18_19
		ldx #31	; VRAM register
		stx vdc_reg
		ldx #0
		; negate int16 for easier counting:
		txa
		sec
		sbc arg3
		sta arg3
		txa
		sbc arg3 + 1
		sta arg3 + 1
		rts	; > X=0 (callers depend on it)

!zone RAM_to_VRAM

VDC_RAM_READPTR		= arg1
VDC_RAM_WRITEPTR	= arg2
VDC_COUNTER		= arg3

		+addcode_ram_to_vram
		+addcode_vram_to_ram

rtv ; copy RAM to VRAM
		jsr complex_instruction_shared_entry
		ldy arg2
		lda arg2 + 1
		jsr rtv_vtr_swp_shared_setup
		jsr ram_to_vram
		jmp complex_instruction_shared_exit

!zone VRAM_to_RAM

vtr ; copy VRAM to RAM
		jsr complex_instruction_shared_entry
		ldy arg1
		lda arg1 + 1
		jsr rtv_vtr_swp_shared_setup
		jsr vram_to_ram
		jmp complex_instruction_shared_exit


!zone exchange_RAM_and_VRAM

swp ; exchange contents of RAM and VRAM
		jsr complex_instruction_shared_entry
		ldy arg1
		lda arg1 + 1
		jsr rtv_vtr_swp_shared_setup	; >> X=0
		; get lowbyte into Y and clear base pointer's lowbyte instead
		ldy arg2
		stx arg2
---				+vdc_ldx	; read byte from VRAM
				; exchange with byte from RAM
				sta $ff01	; full RAM (A is dummy)
				lda (arg2), y
				pha	; RAM-to-VRAM byte is now on stack
				txa
				sta (arg2), y	; VRAM-to-RAM is now done
				dec $ff00	; enable I/O
				; restore previous VRAM address
				ldx #18
				stx vdc_reg
				lda arg1 + 1
				+vdc_sta
				inx
				stx vdc_reg
				lda arg1
				+vdc_sta
				ldx #31
				stx vdc_reg
				; write byte to VRAM
				pla
				+vdc_sta
				; RAM-to-VRAM is now done
				; increment RAM pointer
				iny
				beq .fix_ram_hi
.back_ram			; increment VRAM pointer (needed when "restoring" VRAM address in next iteration)
				inc arg1
				beq .fix_vram_hi
.back_vram			; check whether done
				inc arg3
				bne ---
			inc arg3 + 1
			bne ---
		jmp complex_instruction_shared_exit

.fix_vram_hi	inc arg1 + 1
		jmp .back_vram

.fix_ram_hi	inc arg2 + 1
		jmp .back_ram

!zone copy_charset

vcc ; copy charset from RAM to VRAM
		jsr complex_instruction_shared_entry
		; get low byte of RAM pointer into Y and clear base pointer's low byte instead
		ldy arg1
		ldx #0
		stx arg1
---			; set VRAM pointer
			ldx #18
			lda arg2 + 1
			stx vdc_reg
			sta vdc_data
			inx
			lda arg2
			stx vdc_reg
			sta vdc_data
			ldx #31	; prepare VRAM access
			stx vdc_reg
			; prepare target address for next iteration
			clc
			adc #16
			sta arg2
			bcc +
				inc arg2 + 1
+			; set loop counter (TODO - make bytes per character an optional parameter?)
			lda #8	; character size
			sta arg3 + 1
			ldx #0	; ROMs and I/O
			; loop to copy a single character pattern
--				; read byte from RAM
				sta $ff01	; full RAM (A is dummy)
				lda (arg1), y
				; increment RAM pointer
				iny
				beq .fix_hi
.back				; write byte to VRAM
				stx $ff00	; ROMs and I/O
				+vdc_sta
				; check whether done with this char
				dec arg3 + 1
				bne --
			; all characters done?
			dec arg3
			bne ---
		jmp complex_instruction_shared_exit

.fix_hi		inc arg1 + 1
		jmp .back
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; "rst" instruction
rst		jsr b_parse_uint8_to_X
		jsr io_on
		txa
		lsr
		bcc +
			pha
			jsr reset_vdc_registers
			pla
+		lsr
		bcc .rts
			jmp c_copy_rom_font_to_vram

reset_vdc_registers
		; reset r37 (ignored by kernal)
		ldx #37
		stx vdc_reg
		ldx #$ff
		stx vdc_data
		; this was copied from kernel rom at $e179
		inx;ldx #0		; standard contents
		jsr e_set_vdc_registers
		lda vdc_state	; check VDC version
		and #$07
		beq +
			ldx #$3b	; offset of alterations for non-null version
			jsr e_set_vdc_registers
+		bit $0a03
		bpl .rts
			ldx #$3e	; offset of alterations for PAL system
			jmp ($e192)	; either e_set_vdc_registers or $fc67, depending on kernal
.rts		rts
